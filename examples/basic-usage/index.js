#!/usr/bin/env node

/**
 * Basic Discord Notify Example
 * 
 * This example demonstrates how to use discord-notify in a real application.
 * It shows various notification types and features.
 */

const DiscordNotifyFactory = require('discord-notify');

// Configuration
const config = {
  webhookUrl: process.env.DISCORD_WEBHOOK_URL || 'https://discord.com/api/webhooks/test',
  appName: 'Example App',
  environment: process.env.NODE_ENV || 'development',
  username: 'Example Bot',
  avatarUrl: 'https://via.placeholder.com/64x64/0099ff/ffffff?text=ü§ñ'
};

// Create notifier instance
const notifier = DiscordNotifyFactory(config);

// Example functions that demonstrate different use cases
async function demonstrateBasicNotifications() {
  console.log('üì¢ Demonstrating basic notifications...\n');

  // Success notification
  await notifier.success('Application started successfully!');
  console.log('‚úÖ Sent success notification');

  // Info notification
  await notifier.info('User logged in: john_doe');
  console.log('‚ÑπÔ∏è  Sent info notification');

  // Alert notification
  await notifier.alert('High memory usage detected: 85%');
  console.log('‚ö†Ô∏è  Sent alert notification');

  // Error notification
  await notifier.error('Database connection timeout');
  console.log('üö® Sent error notification');
}

async function demonstrateRichEmbeds() {
  console.log('\nüé® Demonstrating rich embeds...\n');

  // Server status report
  await notifier.send({
    title: 'Server Status Report',
    description: 'Current server metrics and health status',
    color: 0x0099ff,
    fields: [
      { name: 'CPU Usage', value: '45%', inline: true },
      { name: 'Memory Usage', value: '67%', inline: true },
      { name: 'Disk Usage', value: '23%', inline: true },
      { name: 'Active Users', value: '1,234', inline: false },
      { name: 'Uptime', value: '99.9%', inline: false }
    ],
    thumbnail: {
      url: 'https://via.placeholder.com/150x150/0099ff/ffffff?text=üìä'
    },
    author: {
      name: 'System Monitor',
      url: 'https://example.com/dashboard',
      icon_url: 'https://via.placeholder.com/32x32/0099ff/ffffff?text=üìà'
    },
    footer: {
      text: 'Generated by System Monitor',
      icon_url: 'https://via.placeholder.com/16x16/0099ff/ffffff?text=‚ö°'
    }
  });
  console.log('üìä Sent server status report');

  // User activity notification
  await notifier.send({
    title: 'User Activity',
    description: 'New user registration completed',
    color: 0x00ff00,
    fields: [
      { name: 'Username', value: 'jane_doe', inline: true },
      { name: 'Email', value: 'jane@example.com', inline: true },
      { name: 'Registration Time', value: new Date().toLocaleString(), inline: true },
      { name: 'Account Type', value: 'Premium', inline: false }
    ],
    thumbnail: {
      url: 'https://via.placeholder.com/150x150/00ff00/ffffff?text=üë§'
    }
  });
  console.log('üë§ Sent user activity notification');
}

async function demonstrateErrorHandling() {
  console.log('\nüõ°Ô∏è Demonstrating error handling...\n');

  try {
    // Simulate an error
    throw new Error('Something went wrong in the application');
  } catch (error) {
    await notifier.error({
      title: 'Application Error',
      description: error.message,
      fields: [
        { name: 'Stack Trace', value: error.stack || 'No stack trace available', inline: false },
        { name: 'Timestamp', value: new Date().toISOString(), inline: true },
        { name: 'Environment', value: process.env.NODE_ENV || 'unknown', inline: true }
      ]
    });
    console.log('üö® Sent error notification with details');
  }
}

async function demonstrateFileAttachments() {
  console.log('\nüìé Demonstrating file attachments...\n');

  // Create a sample log file
  const logContent = `[${new Date().toISOString()}] INFO: Application started
[${new Date().toISOString()}] INFO: Database connected
[${new Date().toISOString()}] INFO: User authentication successful
[${new Date().toISOString()}] WARN: High memory usage detected
[${new Date().toISOString()}] ERROR: Network timeout`;

  const logBuffer = new TextEncoder().encode(logContent);

  await notifier.sendFile(
    {
      title: 'Daily Log Report',
      description: 'Application logs for ' + new Date().toLocaleDateString(),
      color: 0x00ff00
    },
    {
      name: `app-${new Date().toISOString().split('T')[0]}.log`,
      data: logBuffer,
      contentType: 'text/plain'
    }
  );
  console.log('üìÑ Sent log file attachment');
}

async function demonstrateThreadSupport() {
  console.log('\nüßµ Demonstrating thread support...\n');

  // Note: This requires a valid thread ID
  const threadId = process.env.DISCORD_THREAD_ID || '1234567890123456789';

  await notifier.sendToThread(
    {
      title: 'Thread Update',
      description: 'This message was sent to a specific Discord thread',
      color: 0xff9900,
      fields: [
        { name: 'Thread ID', value: threadId, inline: true },
        { name: 'Message Type', value: 'Thread Update', inline: true }
      ]
    },
    threadId
  );
  console.log('üßµ Sent thread message (if thread ID is valid)');
}

async function demonstrateExtendedNotifier() {
  console.log('\nüîó Demonstrating extended notifier...\n');

  const extendedNotifier = notifier.extend({
    title: 'Deployment Pipeline',
    description: 'This is the base embed for deployment notifications',
    color: 0x0099ff
  });

  await extendedNotifier.send({
    title: 'Build Completed',
    description: 'Application build finished successfully',
    color: 0x00ff00,
    fields: [
      { name: 'Build Time', value: '2m 34s', inline: true },
      { name: 'Status', value: 'Success', inline: true }
    ]
  });
  console.log('üîó Sent extended notification with multiple embeds');
}

// Main execution
async function main() {
  console.log('üöÄ Discord Notify Basic Example');
  console.log('================================\n');

  try {
    // Run all demonstrations
    await demonstrateBasicNotifications();
    await demonstrateRichEmbeds();
    await demonstrateErrorHandling();
    await demonstrateFileAttachments();
    await demonstrateThreadSupport();
    await demonstrateExtendedNotifier();

    console.log('\nüéâ All demonstrations completed successfully!');
    console.log('\nüìù Note: If you see warnings about invalid webhook URLs,');
    console.log('   that\'s expected behavior. Set DISCORD_WEBHOOK_URL');
    console.log('   environment variable to see real notifications.');

  } catch (error) {
    console.error('‚ùå Example failed:', error.message);
    process.exit(1);
  }
}

// Run if this file is executed directly
if (require.main === module) {
  main();
}

module.exports = {
  notifier,
  demonstrateBasicNotifications,
  demonstrateRichEmbeds,
  demonstrateErrorHandling,
  demonstrateFileAttachments,
  demonstrateThreadSupport,
  demonstrateExtendedNotifier
}; 